#!/bin/bash

case $(uname -s) in 
"Darwin")
  OS=Darwin
  is_darwin=yes
  ;;
"Linux")
  OS=Linux
  is_linux=yes
  if [[ -f /mnt/c/WINDOWS/system32/wslconfig.exe ]];
  then
    is_wsl=yes
  fi
  ;;
*)
  ;;
esac;

# Homebrew

if [ $is_darwin ]; then
  if ! command -v brew >/dev/null 2>&1; then
    echo "Installing homebrew"
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi

  brew upgrade
  brew update

  if [ -f "$HOME/.Brewfile" ]; then
    echo "Updating homebrew bundle"
    brew bundle --global
  fi
fi

# Linux packages

if [ $is_linux ]; then
  if [ ! -f /etc/apt/sources.list.d/git-core-ubuntu-ppa-bionic.list ]
  then
    sudo add-apt-repository ppa:git-core/ppa
  fi

  if [ ! -f /etc/apt/sources.list.d/github_git-lfs.list ]
  then
    curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
  fi

  sudo apt-get update
  sudo apt-get upgrade -y

  sudo apt-get install -y \
    git \
    git-lfs \
    jq \
    direnv \
    htop

  if test ! $(which az)
  then
    curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
  fi
fi

if [ ! -d ~/.nvm ]
  then
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    nvm install --lts
  fi

# Node-based tools

if test ! $(which eslint)
then
  npm install -g eslint
fi

if test ! $(which func)
then
  npm install -g azure-functions-core-tools --unsafe-perm true
fi

if test ! $(which netlify)
then
  npm install -g netlify-cli
fi

if test ! -f ~/.netlify/helper/bin/git-credential-netlify
then
  netlify plugins:install netlify-lm-plugin
fi

if test ! $(which prettier)
then
  npm install -g prettier
fi

if test ! $(which tsc)
then
  npm install -g typescript
fi

# Rust

if [ ! -f ~/.cargo/bin/rustup ]
then
  curl https://sh.rustup.rs -sSf | sh -s -- --no-modify-path
fi

# Source code folder index blocker

if [ $is_darwin ]; then
  mkdir -p ~/Source
  touch ~/Source/.metadata_never_index
fi

# MacOS Preferences

if [ $is_darwin ]; then
  osascript -e 'tell application "System Preferences" to quit'

  # Screen Saver Lock
  defaults write com.apple.screensaver askForPassword -int 1
  defaults write com.apple.screensaver askForPasswordDelay -int 0

  # Turn on Firewall
  sudo defaults write /Library/Preferences/com.apple.alf globalstate -int 1
  sudo launchctl load /System/Library/LaunchDaemons/com.apple.alf.agent.plist 2>/dev/null

  # Dock
  defaults write com.apple.dock autohide -bool true

  # Image Capture
  defaults -currentHost write com.apple.ImageCapture disableHotPlug -bool true

  # Finder
  defaults write com.apple.finder AppleShowAllFiles -bool true
  defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
  defaults write com.apple.desktopservices DSDontWriteUSBStores -bool true

  # Time Machine
  defaults write com.apple.TimeMachine DoNotOfferNewDisksForBackup -bool true

  # Safari
  defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaEnabled -bool false
  defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaEnabledForLocalFiles -bool false

  # FileVault
  if [[ `fdesetup status` != "FileVault is On." ]]
  then
    echo "⛔️ FileVault will be enabled."
    sudo fdsetup enable -user $USER  | tee ~/Desktop/"FileVault Recovery Key.txt"
  fi

  LOGIN_TEXT="Found this computer? Please contact Duncan Davidson at duncandavidson@me.com"
  sudo defaults write /Library/Preferences/com.apple.loginwindow LoginwindowText "$LOGIN_TEXT"

  echo "You may need to log out/in for some MacOS settings to take effect"
fi



